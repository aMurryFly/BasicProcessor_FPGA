--------------------------------------------------------------------------------
--
--   FileName:         hw_image_generator.vhd
--   Dependencies:     none
--   Design Software:  Quartus II 64-bit Version 12.1 Build 177 SJ Full Version
--
--   HDL CODE IS PROVIDED "AS IS."  DIGI-KEY EXPRESSLY DISCLAIMS ANY
--   WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT NOT
--   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
--   PARTICULAR PURPOSE, OR NON-INFRINGEMENT. IN NO EVENT SHALL DIGI-KEY
--   BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR CONSEQUENTIAL
--   DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR EQUIPMENT, COST OF
--   PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
--   BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF),
--   ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER SIMILAR COSTS.
--
--   Version History
--   Version 1.0 05/10/2013 Scott Larson
--     Initial Public Release
--    
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY hw_image_generator IS
  GENERIC(
   pixels_y :  INTEGER := 478;   --row that first color will persist until
   pixels_x :  INTEGER := 600);  --column that first color will persist until
  PORT(
    disp_ena :  IN   STD_LOGIC;  --display enable ('1' = display time, '0' = blanking time)
    row      :  IN   INTEGER;    --row pixel coordinate
    column   :  IN   INTEGER;    --column pixel coordinate
	 
	 disp0, disp1,disp2,disA, disB,ledfetch: out std_logic_vector(6 downto 0);
	 
	 
    red      :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');  --red magnitude output to DAC
    green    :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');  --green magnitude output to DAC
    blue     :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0') );
    
	 END hw_image_generator;

ARCHITECTURE behavior OF hw_image_generator IS

BEGIN
	PROCESS(disp_ena, row, column)
		BEGIN
		IF(disp_ena = '1') THEN        --display time

		--Dato A
			if ((row >120  and row<140 ) AND (column>70 and column <100)) then 
					if(disA(0)='0') then
						red <= (Others =>'1');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					else
						red <= (Others =>'0');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					end if;
				--1
				elsif ((row >140  and row<220 ) AND (column>100 and column <115)) then
					if(disA(1)='0') then
						red <= (Others =>'1');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					else
						red <= (Others =>'0');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					end if;
				--2
				elsif ((row >240  and row<320 ) AND (column>100 and column <115)) then
					if(disA(2)='0') then
						red <= (Others =>'1');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					else
						red <= (Others =>'0');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					end if;
				--3
				elsif ((row >320  and row<340 ) AND (column>70 and column <100)) then
					if(disA(3)='0') then
						red <= (Others =>'1');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					else
						red <= (Others =>'0');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					end if;
				--4
				elsif ((row >240  and row<320 ) AND (column>55 and column <70)) then
					if(disA(4)='0') then
						red <= (Others =>'1');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					else
						red <= (Others =>'0');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					end if;
				--5
				elsif ((row >140  and row<220 ) AND (column>55 and column <70) ) then
					if(disA(5)='0') then
						red <= (Others =>'1');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					else
						red <= (Others =>'0');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					end if;
				--6
				elsif ((row >220  and row<240 ) AND (column>70 and column <100)) then
					if(disA(6)='0') then
						red <= (Others =>'1');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					else
						red <= (Others =>'0');
						green <= (Others =>'0');
						blue <= (Others =>'0');
					end if;
			  
		


		END IF;  --del enable

	END PROCESS;
END behavior;